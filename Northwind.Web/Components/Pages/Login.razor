@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.WebUtilities
@using Northwind.Web.Authentication
@using System.ComponentModel.DataAnnotations
@inject UserAccountService userAccountService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager


@* <div class="row">
<div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
<div class="mb-3 text-center">
<h3>LOGIN</h3>
</div>
<div class="mb-3">
<label>User Name</label>
<input @bind="model.UserName" class="form-control" placeholder="User Name" />
</div>
<div class="mb-3">
<label>Password</label>
<input @bind="model.Password" type="password" class="form-control" placeholder="Password" />
</div>
<div class="mb-3 d-grid gap-2">
<button @onclick="Authenticate" class="btn btn-primary">Login</button>
</div>
</div>
</div> *@

<EditForm FormName="loginForm" Model="model" OnValidSubmit="Authenticate" method="post">


    <div class="row">
        <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
            <div class="mb-3 text-center">
                <h3>LOGIN</h3>
            </div>
            <div class="mb-3">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
            </div>
            <div class="mb-3">
                <label>User Name</label>
                <InputText @bind-Value="model.UserName" class="form-control"></InputText>
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="model.Password" class="form-control"></InputText>
            </div>
            @if (IsLoginFailed != null && !IsLoginFailed.Value)
            {
                <div class="mb-3 d-grid gap-2">
                    <span class="text-danger">Login failed</span>
                </div>
            }
            <div class="mb-3 d-grid gap-2">
                <button class="btn btn-primary">Login</button>
            </div>
        </div>
    </div>
</EditForm>

<form method="post" @model="model" @formname="Login" @onsubmit="AuthenticateHtmlForm">

    <div class="row">
        <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
            <div class="mb-3 text-center">
                <h3>LOGIN</h3>
            </div>
            <div class="mb-3">
                <label>User Name</label>
                <InputText @bind-Value="model.UserName" class="form-control"></InputText>
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="model.Password" class="form-control"></InputText>
            </div>
            @if (IsLoginFailed != null && !IsLoginFailed.Value)
            {
                <div class="mb-3 d-grid gap-2">
                    <span class="text-danger">Login failed</span>
                </div>
            }

            <div class="mb-3 d-grid gap-2">
                <button class="btn btn-primary">Login</button>
            </div>
        </div>
    </div>
    <AntiforgeryToken />
</form>

@code {
    public class Model
    {
        [Required]
        public string? UserName { get; set; }
        [Required]
        public string? Password { get; set; }
    }
    [SupplyParameterFromForm]
    private Model model { get; set; } = new();
    private bool? IsLoginFailed;

    private async Task Authenticate(EditContext formContext)
    {
        var inputModel = (Model)formContext.Model;
        if(inputModel == null || string.IsNullOrEmpty(inputModel.UserName))
        {
            IsLoginFailed = false;
            return;
        }

        var userAccount = userAccountService.GetByUserName(inputModel.UserName);
        if (userAccount == null || userAccount.Password != inputModel.Password)
        {
            IsLoginFailed = false;
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = userAccount.UserName,
                Role = userAccount.Role
            });

        var uri = navManager.ToAbsoluteUri(navManager.Uri);
        var urlToNavigate = "/";
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("ReturnUrl", out var param))
        {
            urlToNavigate = param.First() ?? "/";
        }
        navManager.NavigateTo(urlToNavigate);
    }

    private async Task AuthenticateHtmlForm()
    {
        var inputModel = model;
        if(string.IsNullOrEmpty(inputModel.UserName))
         {
            IsLoginFailed = false;
            return;
        }
        var userAccount = userAccountService.GetByUserName(inputModel.UserName);
        if (userAccount == null || userAccount.Password != inputModel.Password)
        {
            IsLoginFailed = false;
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = userAccount.UserName,
                Role = userAccount.Role
            });

        var uri = navManager.ToAbsoluteUri(navManager.Uri);
        var urlToNavigate = "/";
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("ReturnUrl", out var param))
        {
            urlToNavigate = param.First() ?? "/";
        }
        navManager.NavigateTo(urlToNavigate);
    }
}